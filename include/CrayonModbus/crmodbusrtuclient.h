#ifndef CRMODBUSRTUCLIENT_H
#define CRMODBUSRTUCLIENT_H

#include <crmodbusabstractclient.h>

#include <QSerialPort>
#include <QQueue>
#include <QHash>

class QSerialPort;
class QTimer;

class QState;
class QFinalState;
class QStateMachine;

class CrModbusRequest;
class  CRAYON_MODBUS_EXPORT CrModbusRtuClient : public CrModbusAbstractClient
{
    Q_OBJECT
public:
    explicit CrModbusRtuClient(QObject *parent = nullptr);

    virtual bool open() override;
    virtual bool close() override;

    QSerialPort* serialPort() const;
    void setSerialPort(QSerialPort* port);

    int delayOfFrame() const;
    void setDelayOfFrame(int delayOfFrame);


    inline static quint16 calculateCRC(const char *data, qint32 len)
    {
        // Generated by pycrc v0.8.3, https://pycrc.org
        // Width = 16, Poly = 0x8005, XorIn = 0xffff, ReflectIn = True,
        // XorOut = 0x0000, ReflectOut = True, Algorithm = bit-by-bit-fast
        quint16 crc = 0xFFFF;
        while (len--) {
            const quint8 c = *data++;
            for (qint32 i = 0x01; i & 0xFF; i <<= 1) {
                bool bit = crc & 0x8000;
                if (c & i)
                    bit = !bit;
                crc <<= 1;
                if (bit)
                    crc ^= 0x8005;
            }
            crc &= 0xFFFF;
        }
        crc = crc_reflect(crc & 0xFFFF, 16) ^ 0x0000;
        return (crc >> 8) | (crc << 8); // swap bytes
    }

    inline static quint16 crc_reflect(quint16 data, qint32 len)
    {
        // Generated by pycrc v0.8.3, https://pycrc.org
        // Width = 16, Poly = 0x8005, XorIn = 0xffff, ReflectIn = True,
        // XorOut = 0x0000, ReflectOut = True, Algorithm = bit-by-bit-fast
        quint16 ret = data & 0x01;
        for (qint32 i = 1; i < len; i++) {
            data >>= 1;
            ret = (ret << 1) | (data & 0x01);
        }
        return ret;
    }

    virtual void processRequest(CrModbusRequest* request) override;

signals:
    void errorOccurred(const QString& error);

private:
    Q_DISABLE_COPY(CrModbusRtuClient)

    QSerialPort* serialPort_ = nullptr;

    int delayOfFrame_ = 15;

    QQueue<CrModbusRequest*> queue_;
    CrModbusRequest* currentRequest_ = nullptr;
    int retries_ = 0;
    QByteArray readBuffer_;
    QTimer* timeoutTimer_;

    void nextRequest();
    void writeRequest();
    void readResponce();
};

#endif // CRMODBUSRTUCLIENT_H
